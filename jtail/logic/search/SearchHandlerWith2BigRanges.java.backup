package jtail.logic.search;

import java.io.File;
import java.util.List;
import java.util.SortedSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import jtail.config.Config;
import jtail.log.MyLogger;
import jtail.logic.FileBlock;
import jtail.logic.FileBlockHandler;
import jtail.logic.Range;
import jtail.logic.ViewContent;
import jtail.logic.filter.Filter;
import jtail.logic.filter.FilterHandler;
import jtail.resources.Resource;
import jtail.ui.tab.TailTab;
import jtail.ui.tab.pane.DisplayTriggerAction;
import jtail.util.FileUtil;
import jtail.util.Value;

import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.text.DocumentEvent;
import org.eclipse.jface.text.IDocumentListener;

public final class SearchHandlerWith2BigRanges implements IDocumentListener {
	private static final int MINIMUM_START_OFFSET = 0;	
	private int searchStartOffset = MINIMUM_START_OFFSET;
	
	private SearchWord prevSearchWord = null;
	private SearchWord currentSearchWord = null;
	private int prevMatchLength = 0;
	private final File file;
	private TailTab tailTab = null;
	private FileBlockHandler fileBlockHandler = null;
	private Range rangeWhenTailPaused;
	private String textWhenTailPaused = "";
	// private int fileBlockIndexToSearch = 0;
	// private List<FileBlock> fileBlockListWhenTailPaused;

	private static SortedSet<String> searchWordSet = Config.bean.getSearchWordSet();;

	public SearchHandlerWith2BigRanges(TailTab tailTab) {
		this.tailTab = tailTab;
		this.file = this.tailTab.getFile();
		this.fileBlockHandler = new FileBlockHandler(this.file);
		// this.frdAdapter = new FindReplaceDocumentAdapter(text.getDocument());
	}

	public void search(SearchWord searchWord) {
		this.currentSearchWord = searchWord;
		boolean tailPaused = stopTail();
		if (tailPaused) {
			textWhenTailPaused = buildTextWhenTailPaused();
			rangeWhenTailPaused = new Range(0, textWhenTailPaused.length());
			setSearcStartOffsetWhenTailPaused();
		}
		
		// startAutomaticTailStopCancelHandler(tailTab);
		updateSearchCombo();
		adjustSearchStartOffsetWhenSearchDirectionChanged();
		
		SearchRangesDividedBySearchStatringOffset searchRanges = 
			getSearchRangesDividedBySearchStatringOffset();
		ViewContent searchResult = doSearch(searchRanges.getToBeSearchedFirst());
		if (!searchResult.isMatchFound() && searchRanges.secondPartExists()) {
			if (userWantsCircularSearch()) {
				searchResult = doSearch(searchRanges.getToBeSearchedIfCircularSearchIsAllowed());
			} 
		}

		if (searchResult.isMatchFound()) {
			this.tailTab.redrawViewArea(searchResult, DisplayTriggerAction.SEARCH_EXECUTED);
			updateSearchStartOffsetWhenMatchFound(searchResult);		
			tailTab.reflectSearchResultToUI(true);
		} else {
			if (!matchFoundForSamePreviousSearch()) {
				tailTab.reflectSearchResultToUI(false);	
			}
		}		
		
		updatePreviousSearchInfo(searchWord, searchResult);
	}
	
	private SearchRangesDividedBySearchStatringOffset getSearchRangesDividedBySearchStatringOffset() {
		Range firstRange;
		Range secondRange;
		if (this.isForwardSearch()) {
			if (0 < this.searchStartOffset
					&& this.searchStartOffset < this.rangeWhenTailPaused.getEndIndex()) {
				firstRange = new Range(this.searchStartOffset,
						this.rangeWhenTailPaused.getEndIndex() - this.searchStartOffset);
				secondRange = new Range(0, this.searchStartOffset);
			} else {
				firstRange = new Range(0, this.rangeWhenTailPaused.getEndIndex());
				secondRange = null;
			}
		} else {
			if (0 < this.searchStartOffset
					&& this.searchStartOffset < this.rangeWhenTailPaused.getEndIndex()) {
				firstRange = new Range(0, this.searchStartOffset);
				secondRange = new Range(this.searchStartOffset,
						this.rangeWhenTailPaused.getEndIndex() - this.searchStartOffset);
			} else {
				firstRange = new Range(0, this.rangeWhenTailPaused.getEndIndex());
				secondRange = null;
			}
		}
		return new SearchRangesDividedBySearchStatringOffset(firstRange, secondRange);
	}

	public ViewContent doSearch(Range rangeInWholeSnapshot) {
		boolean found = false;
		int startIndex = 0;
		int endIndex = 0;
		String textTillOneEndOfSnapshot = getTextTillOneEndOfSnapshot(rangeInWholeSnapshot);

		if (this.currentSearchWord.isRegularExpressionSearch()) { // it means it is not whole word
																	// search.
			int flags = Pattern.MULTILINE; // Pattern.DOTALL; //Pattern.MULTILINE;
			if (!this.currentSearchWord.isCaseSensitive()) {
				flags = flags | Pattern.CASE_INSENSITIVE;
			}
			Pattern p = Pattern.compile(this.currentSearchWord.getStringToFind(), flags);
			Matcher m = p.matcher(textTillOneEndOfSnapshot);

			while (m.find()) {
				found = true;
				startIndex = m.start();
				endIndex = m.end();
				if (isForwardSearch()) {
					break;
				}
			}
		} else {
			startIndex = textTillOneEndOfSnapshot.indexOf(getStringToFind());
			if (startIndex != -1) {
				endIndex = startIndex + getStringToFind().length();
				found = true;
			}
		}

		ViewContent searchResult = new ViewContent(null, null, null);
		if (found) {
			Range matchRangeInPartialSnapshot = new Range(startIndex, endIndex - startIndex);
			Range matchRangeInWholeSnapshot = adjustRangeInWholeSnapshot(rangeInWholeSnapshot, matchRangeInPartialSnapshot);
			searchResult = buildSearchResult(matchRangeInWholeSnapshot);
		}

		return searchResult;
	}

	private ViewContent buildSearchResult(Range matchRangeInWholeSnapshot) {
		int matchStartIndex = matchRangeInWholeSnapshot.getStartIndex();
		int matchEndIndex = matchRangeInWholeSnapshot.getEndIndex();
		int matchLength = matchRangeInWholeSnapshot.getLength();
		int matchMiddleIndex = matchStartIndex + (matchLength/2);
		int halfBlockSize = FileBlockHandler.getHalfBlockSize();
		int contentStartIndex = matchMiddleIndex - halfBlockSize;
		int contentEndIndex = matchMiddleIndex + halfBlockSize;
		
		if (contentStartIndex < this.rangeWhenTailPaused.getStartIndex()) {
			contentStartIndex = this.rangeWhenTailPaused.getStartIndex();
		} else if (matchStartIndex < contentStartIndex){
			contentStartIndex = matchStartIndex;
		}
		
		if (contentEndIndex > this.rangeWhenTailPaused.getEndIndex()){
			contentEndIndex = this.rangeWhenTailPaused.getEndIndex();
		} else if (contentEndIndex < matchEndIndex){
			contentEndIndex = matchEndIndex;
		}
		
		Range rangeWithinTextWhenTailPaused = new Range(contentStartIndex, contentEndIndex - contentStartIndex);
		int matchStartIndexWithinViewingContent = matchStartIndex - contentStartIndex;		 
		Range matchIndexWithinViewingContent = new Range(matchStartIndexWithinViewingContent, matchLength);
		String text = this.textWhenTailPaused.substring(contentStartIndex, contentEndIndex);
		ViewContent searchResult = new ViewContent(text, rangeWithinTextWhenTailPaused, matchIndexWithinViewingContent);
		return searchResult;
	}

	private Range adjustRangeInWholeSnapshot(Range rangeInWholeSnapshot,
			Range matchRangeInPartialSnapshot) {
		int startIndex = matchRangeInPartialSnapshot.getStartIndex() + rangeInWholeSnapshot.getStartIndex();
		int endIndex = matchRangeInPartialSnapshot.getEndIndex() + rangeInWholeSnapshot.getStartIndex();
		Range adjustedRange = new Range(startIndex, endIndex - startIndex);
		return adjustedRange;
	}

	private String getTextTillOneEndOfSnapshot(Range searchRange) {
		if (searchRange == null) {
			return "";
		} else {
			return this.textWhenTailPaused.substring(searchRange.getStartIndex(),
					searchRange.getEndIndex());
		}
	}

	private String getStringToFind() {
		return this.currentSearchWord.getStringToFind();
	}

	private boolean isForwardSearch() {
		return this.currentSearchWord.isForwardSearch();
	}

	private String buildTextWhenTailPaused() {
		String fileContent = readFileContent();
		if (isFilterUsed()) {
			fileContent = applyFilters(fileContent);
		}
		return fileContent;
	}

	private boolean isFilterUsed() {
		return (this.tailTab.isFilterUsed());
	}

	private String readFileContent() {
		return FileUtil.readFile(this.file);
	}
	
	private boolean userWantsCircularSearch() {
		return MessageDialog.openConfirm(this.tailTab.getShell(),
				Resource.getString("jtail"), Resource.getString("continue.search.question"));
	}

	public String applyFilters(String source) {
		List<Filter> filterList = this.tailTab.getFilterList();
		if (Value.isEmpty(filterList)) {
			return source;
		}

		for (Filter filter : filterList) {
			if (filter == null) {
				continue;
			}
			source = FilterHandler.applyFilter(source, filter);
		}
		return source;
	}

	public ViewingContentOld getFilteredContentByBlockSize(List<Filter> filterList, FileBlock block) {
		int rangeStartIndex = block.getStartIndex();
		int rangeEndIndex = block.getEndIndex();
		FileRange fileRange = new FileRange(fileBlockHandler.getFile(), rangeStartIndex,
				rangeEndIndex - rangeStartIndex);
		ViewingContentOld searchContent = new ViewingContentOld(fileRange, block.getText());

		if (Value.isEmpty(filterList)) {
			return searchContent;
		}

		StringBuffer filteredContent = new StringBuffer();
		String text = block.getText();

		do {
			for (Filter filter : filterList) {
				if (filter == null) {
					continue;
				}

				text = FilterHandler.applyFilter(text, filter);
			}

			if (this.currentSearchWord.isForwardSearch()) {
				filteredContent.append(text);
				if (!fileBlockHandler.nextBlockExists(block)) {
					break;
				}
				block = fileBlockHandler.getNextFileBlock(block);
			} else {
				filteredContent.insert(0, text);
				if (!fileBlockHandler.previousBlockExists(block)) {
					break;
				}
				block = fileBlockHandler.getPreviousFileBlock(block);
			}

			text = block.getText();
		} while (filteredContent.length() < FileBlockHandler.getBlockSize());

		if (this.currentSearchWord.isForwardSearch()) {
			rangeEndIndex = block.getEndIndex();
		} else {
			rangeStartIndex = block.getStartIndex();
		}
		fileRange = new FileRange(fileBlockHandler.getFile(), rangeStartIndex, rangeEndIndex
				- rangeStartIndex);
		searchContent.setFileRange(fileRange);
		searchContent.setTextDisplayed(filteredContent.toString());

		return searchContent;
	}

	private void updateSearchStartOffsetWhenMatchFound(ViewContent searchResult) {
		if (searchResult.isMatchFound()){			
			if (this.isForwardSearch()){
				this.setStartOffset(searchResult.getStartIndexInWholeSnapshot()
						+ searchResult.getMatchEndIndex());
			} else {
				this.setStartOffset(searchResult.getStartIndexInWholeSnapshot()
						+ searchResult.getMatchStartIndex());
			}							
		}				
	}

	private void updatePreviousSearchInfo(SearchWord searchWord, ViewContent searchResult) {
		// save current search word to be compared to next search word.
		this.prevSearchWord = new SearchWord(searchWord);
		if (searchResult.isMatchFound()){
			this.prevMatchLength = searchResult.getMatchRange().getLength();	
		}		
	}
	
	private boolean matchFoundForSamePreviousSearch() {
		if (this.prevSearchWord == null || this.currentSearchWord == null){
			return false;
		} else {
			if (this.prevSearchWord.equalsExceptSearchDirection(this.currentSearchWord)){
				return (this.prevMatchLength > 0);
			}
		}
		return false;
	}

	private void setSearcStartOffsetWhenTailPaused() {
		if (isForwardSearch()) {
			setMinimumStartOffset();
			// this.getViewPortChangeHandler().displayFirstBlock();
		} else {
			setMaximumStartOffset();
			// this.getViewPortChangeHandler().displayLastBlock();
		}
	}

	public void setMinimumStartOffset() {
		this.setStartOffset(MINIMUM_START_OFFSET);
	}

	public void setMaximumStartOffset() {
		// this.setStartOffset(getDocumentLength() - 1);
		this.setStartOffset(this.getFileLength());
	}

	// private int getDocumentLength() {
	// return textViewer.getDocument().getLength();
	// }

	private void updateSearchCombo() {
		if (!searchWordSet.contains(this.currentSearchWord.getStringToFind())) {
			searchWordSet.add(this.currentSearchWord.getStringToFind());
		}
	}

	private boolean stopTail() {
		// stop current tail if it was not stopped already for search.
		if (tailTab.isTailRunning()) {
			// tailTab.checkStopTailButton(true);
			tailTab.pauseTail();
			return true;
		}
		return false;
	}

	private void adjustSearchStartOffsetWhenSearchDirectionChanged() {
		if (this.prevSearchWord == null || this.currentSearchWord == null){
			return;
		}
		
		if (this.prevSearchWord.isForwardSearch() != this.currentSearchWord.isForwardSearch()) {
			if (this.currentSearchWord.isForwardSearch()) {
				// from backward to forward
				this.setStartOffset(this.searchStartOffset + this.prevMatchLength);
			} else {
				// from forward to backward
				this.setStartOffset(this.searchStartOffset - this.prevMatchLength);
			}
		}		
	}

	private void startAutomaticTailStopCancelHandler(TailTab tailTab) {
		/*
		 * Resume search monitor if it is alive in case it was suspended. Start the search monitor
		 * if it died.
		 */
		AutomaticTailStopCancelHandler searchMonitor = tailTab.getSearchMonitor();
		searchMonitor.updateSearchTime();
		if (searchMonitor.isAlive()) {
			if (searchMonitor.isThreadSuspended()) {
				searchMonitor.setThreadSuspended(false);
				MyLogger.debug("searchMonitor was resumed.");
			}
		} else {
			searchMonitor.start();
			MyLogger.debug("searchMonitor is not alive so started it.");
		}
	}

	/**
	 * Clear previous search information and set startoffset to the end of file for the new search.
	 */
//	private void searchWordChanged(boolean isForwardSearch) {
//		MyLogger.debug("searchWordChanged(), isForwardSearch:" + isForwardSearch);
//		// clear previous search information.
//		this.prevSearchWord = null;
//		this.prevMatchLength = 0;
//
//		// if new search has begun, set startoffset according to search direction.
//		this.setDefaultStartOffset(isForwardSearch);
//	}

	// getter, setter

	/**
	 * Set startOffset. If new offset is out of legal range, adjust it.
	 * 
	 * @param offset
	 *            new offset
	 */
	public void setStartOffset(int offset) {
		if (offset < 0) {
			offset = 0;
		} else if (offset > getFileLength()) {
			offset = getFileLength();
		}
		this.searchStartOffset = offset;
		MyLogger.debug("setStartOffset():" + this.searchStartOffset);
	}

	public void documentAboutToBeChanged(DocumentEvent event) {

	}

	public void documentChanged(DocumentEvent event) {
		// this.resetStartOffsetToEnd(event.getDocument());
	}

	// public void resetStartOffsetToEnd(IDocument doc) {
	// this.setStartOffset(doc.getLength() - 1);
	// }

	public TailTab getTailTab() {
		return tailTab;
	}

	/*
	 * public void searchOld(SearchWord searchWord) { stopTail();
	 * //startAutomaticTailStopCancelHandler(tailTab); updateSearchCombo(searchWord);
	 * adjustStartOffset(searchWord);
	 * 
	 * MyLogger.debug("SearchHandler.search(), search word:" + searchWord+
	 * ", searchStartOffset:"+this.searchStartOffset+ ", fileLength:"+this.getFileLength());
	 * 
	 * ExecutorService executorService = Executors.newCachedThreadPool(); List<FileRange>
	 * fileRangeList = this.getFileBlockHandler().getFileRangeList( searchWord.isForwardSearch(),
	 * this.searchStartOffset); MyLogger.debug("fileRangeList:" + fileRangeList);
	 * List<Future<FileRange>> resultList = new ArrayList<Future<FileRange>>();
	 * 
	 * for (int i = 0; i < fileRangeList.size(); i++) { resultList.add(executorService.submit(new
	 * Searcher(fileRangeList.get(i), searchWord))); }
	 * 
	 * boolean found = false; boolean cancelled = false; FileRange matchRange =
	 * FileRange.EMPTY_RANGE; int cancelledTask = 0; //for (Future<SubDocument> result :
	 * resultList){ for (int i = 0; i < resultList.size(); i++) { if (found){ cancelled =
	 * resultList.get(i).cancel(true); if (cancelled) {
	 * MyLogger.debug("cancelled at result index:"+i); cancelledTask++; } } else { try { matchRange
	 * = resultList.get(i).get(); } catch (InterruptedException e) {
	 * DialogUtil.displayErrorDialog(e); return; } catch (ExecutionException e) {
	 * DialogUtil.displayErrorDialog(e); return; } if (!matchRange.equals(FileRange.EMPTY_RANGE)){
	 * MyLogger.debug("found at result index:"+i); found = true; } else {
	 * MyLogger.debug("not found at result index:"+i); } } }
	 * 
	 * MyLogger.debug("number of cancelled search task:"+cancelledTask);
	 * 
	 * if (found){ tailTab.reflectSearchResultToUI(true); } else {
	 * tailTab.reflectSearchResultToUI(false); return; }
	 * 
	 * ViewingBlock viewingBlock = displayMatch(searchWord, matchRange);
	 * updateSearchStartOffset(searchWord.isForwardSearch(), viewingBlock);
	 * updatePrevMatchInfo(searchWord, viewingBlock); }
	 */

	// private ViewPortChangeHandler getViewPortChangeHandler() {
	// return this.tailTab.getViewPortChangeHandler();
	// }
	//
	// private ViewingBlock searchFile(SearchWord searchWord, int offsetInFile, int length) {
	// if (offsetInFile < 0 || length <= 0 || searchWord == null) {
	// return ViewingBlock.EMPTY_BLOCK;
	// }
	//
	// boolean found = false;
	// int startIndex = 0;
	// int endIndex = 0;
	// String target = FileUtil.readFile(this.tailTab.getFile(), offsetInFile, length);
	//
	// if (searchWord.isRegularExpressionSearch()) { // it means it is not whole word search.
	// int flags = Pattern.MULTILINE;
	// if (!searchWord.isCaseSensitive()) {
	// flags = flags | Pattern.CASE_INSENSITIVE;
	// }
	// Pattern p = Pattern.compile(searchWord.getStringToFind(), flags);
	// Matcher m = p.matcher(target);
	//
	// while (m.find()) {
	// found = true;
	// startIndex = m.start();
	// endIndex = m.end();
	// if (searchWord.isForwardSearch()) {
	// break;
	// }
	// }
	// } else {
	// startIndex = target.indexOf(searchWord.getStringToFind());
	// if (startIndex != -1) {
	// endIndex = startIndex + searchWord.getStringToFind().length();
	// found = true;
	// }
	// }
	//
	// if (found) {
	// return new ViewingBlock(target.substring(startIndex, endIndex), offsetInFile
	// + startIndex);
	// } else {
	// if (0 < offsetInFile || offsetInFile + length < this.getFileLength()) {
	// int searchStartOffset = 0;
	// int searchLength = 0;
	// if (searchWord.isForwardSearch()){
	// if (offsetInFile + length < this.getFileLength()){
	// searchStartOffset = offsetInFile + length;
	// searchLength = this.getFileLength() - searchStartOffset;
	// } else {
	// searchStartOffset = 0;
	// searchLength = offsetInFile;
	// }
	// } else {
	// if (0 < offsetInFile){
	// searchStartOffset = 0;
	// searchLength = offsetInFile;
	// } else {
	// searchStartOffset = length;
	// searchLength = this.getFileLength() - searchLength;
	// }
	// }
	// return searchFile(searchWord, searchStartOffset, searchLength);
	// } else {
	// /*
	// * if it runs from the start of the file, search failed and we don't need to search
	// * again.
	// */
	// return ViewingBlock.EMPTY_BLOCK;
	// }
	// }
	//
	// }

	private File getFile() {
		return this.file;
	}

	private int getFileLength() {
		return (int) this.file.length();
	}

	private FileBlockHandler getFileBlockHandler() {
		return this.fileBlockHandler;
	}

	/**
	 * Execute the search for the current tailing document and perform UI change needed.
	 * 
	 * @param tailTab
	 *            TailTab where this search was initiated.
	 * @throws IOException
	 */
	// public void search(TailTab tailTab, String stringToSearch, SearchCondition searchCondition) {
	// MyLogger.log("search condition:"+searchCondition);
	//
	// /*
	// * check if search area is cleared or not. if search area was cleared (document is empty)
	// * then don't perform the search to prevent BadLocationException.
	// */
	// if (this.getDocumentLength() <= 0) {
	// tailTab.reflectSearchResultToUI(false);
	// return;
	// }
	//
	// // stop current tail if it was not stopped already for search.
	// if (tailTab.isTailRunning()) {
	// tailTab.checkStopTailButton(true);
	// }
	//
	// /*
	// * Resume search monitor if it is alive in case it was suspended.
	// * Start the search monitor if it died.
	// */
	// SearchMonitor searchMonitor = tailTab.getSearchMonitor();
	// searchMonitor.updateSearchTime();
	// if (searchMonitor.isAlive()) {
	// if (searchMonitor.isThreadSuspended()){
	// searchMonitor.setThreadSuspended(false);
	// MyLogger.log("searchMonitor was resumed.");
	// }
	// } else {
	// searchMonitor.start();
	// MyLogger.log("searchMonitor is not alive so started it.");
	// }
	//
	// // update search word set.
	// searchWordSet.add(stringToSearch);
	//
	// //this.setForwardSearch(searchOptionHandler.isForwardSearch());
	//
	// /*
	// * compare current search condition to previous search condition. If they are different,
	// * reset startOffset to end of document.
	// */
	// SearchWord currentSearchWord = new SearchWord(searchCondition.isCaseSensitiveSearch(),
	// searchCondition.isRegularExpressionSearch(), stringToSearch,
	// searchCondition.isWholeWordSearch());
	// if (this.prevSearchWord == null) {
	// // new search is started.
	//
	// }
	//
	// if (!currentSearchWord.equals(prevSearchWord)) {
	// // if search word was changed, set start offset to the end of file.
	// this.searchWordChanged(searchCondition.isForwardSearch());
	// } else {
	// // if search word is same, check if search direction was changed or not.
	// if (this.prevForwardSearch != searchCondition.isForwardSearch()) {
	// if (searchCondition.isForwardSearch()) {
	// // from backward to forward
	// this.setStartOffset(this.startOffset + this.prevMatchLength);
	// } else {
	// // from forward to backward
	// this.setStartOffset(this.startOffset - this.prevMatchLength);
	// }
	// }
	// }
	//
	// IRegion region = null;
	// //CursorHandler ch = new CursorHandler(this.text.getTextWidget().getShell());
	// CursorHandler ch = new CursorHandler();
	// try {
	// //MyLogger.log("search start");
	// ch.startWaitCursor();
	// region = frdAdapter.find(startOffset, stringToSearch, searchCondition.isForwardSearch(),
	// searchCondition.isCaseSensitiveSearch(),
	// searchCondition.isWholeWordSearch(),
	// searchCondition.isRegularExpressionSearch());
	// } catch (BadLocationException ex) {
	// throw new RuntimeException(ex);
	// } finally {
	// ch.stopWaitCursor();
	// //MyLogger.log("search end");
	// }
	//
	// if (region == null) { // no match
	// if (searchCondition.isForwardSearch()) {
	// if (this.getViewPortChangeHandler().nextBlockExist()){
	// this.getViewPortChangeHandler().displayNextBlock();
	// search(tailTab, stringToSearch, searchCondition);
	// return;
	// }
	// } else {
	// if (this.getViewPortChangeHandler().previousBlockExist()){
	// this.getViewPortChangeHandler().displayPreviousBlock();
	// search(tailTab, stringToSearch, searchCondition);
	// return;
	// }
	// }
	//
	// if (currentSearchWord.equals(prevSearchWord) && this.prevMatchLength > 0){
	// /*
	// * If there was previous match for the same search word and now it
	// * doesn't find the match, start search from either start of the file (forward search)
	// * or end of the file (backward search) according to search direction. This enables
	// * circular search supported by most of editors such as UltraEdit.
	// */
	// setDefaultStartOffset(searchCondition.isForwardSearch());
	// search(tailTab, stringToSearch, searchCondition);
	// return;
	// } else {
	// tailTab.reflectSearchResultToUI(false);
	// return;
	// }
	// } else {
	// tailTab.reflectSearchResultToUI(true);
	// }
	//
	// // if search succeeded, display the match.
	// int offset = region.getOffset();
	// int length = region.getLength();
	//
	// // highlight matched region.
	// textViewer.setSelectedRange(offset, length);
	//
	// // copy the match.
	// textViewer.getTextWidget().copy();
	//
	// // text.setTopIndex(offset);
	// int visibleTopLineIndex = textViewer.getTopIndex();
	// int visibleBottomLineIndex = textViewer.getBottomIndex();
	// int middleLineIndexFromTop = (visibleBottomLineIndex - visibleTopLineIndex) / 2;
	// int matchLineIndex = getLineIndex(offset);
	//
	// // top line index after moving matched line to middle of viewport
	// int newTopIndex = matchLineIndex - middleLineIndexFromTop;
	// if (newTopIndex < 0) {
	// newTopIndex = 0;
	// }
	//
	// this.textViewer.setTopIndex(newTopIndex);
	// this.updateStartOffset(searchCondition.isForwardSearch(), offset, length);
	//
	// // save current search word to be compared to next search word.
	// this.prevSearchWord = currentSearchWord;
	//
	// // save current search direction to be compared to next search direction.
	// this.prevForwardSearch = searchCondition.isForwardSearch();
	// this.prevMatchLength = length;
	// }
}
